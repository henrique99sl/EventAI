openapi: 3.0.0
info:
  title: EventAI Backend API
  description: API para gestão de utilizadores, eventos e venues.
  version: "1.0.0"
servers:
  - url: http://localhost:8000
tags:
  - name: Auth
    description: Endpoints de autenticação e perfil
  - name: Users
    description: Gestão de utilizadores
  - name: Events
    description: Gestão de eventos
  - name: Venues
    description: Gestão de locais/venues
paths:
  /login:
    post:
      tags: [Auth]
      summary: Login de utilizador
      description: Autentica o utilizador e devolve um JWT válido.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@exemplo.com
                password:
                  type: string
                  example: senhaSegura123
      responses:
        '200':
          description: Token de autenticação JWT
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: '#/components/schemas/User'
              examples:
                sucesso:
                  summary: Exemplo de sucesso
                  value:
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    user:
                      id: 1
                      username: "jose"
                      email: "jose@exemplo.com"
                      role: "user"
        '401':
          description: Credenciais inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                erro:
                  value:
                    error: "Credenciais inválidas"
  /users:
    get:
      tags: [Users]
      summary: Lista todos os utilizadores
      description: Lista todos os utilizadores registados no sistema.
      responses:
        '200':
          description: Lista de utilizadores
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags: [Users]
      summary: Cria novo utilizador
      description: Cria um novo utilizador (role "admin" apenas se autenticado como admin).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
            example:
              username: "jose"
              email: "jose@exemplo.com"
              password: "SenhaSegura123"
              role: "user"
      responses:
        '201':
          description: Utilizador criado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Erro de validação
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                erro:
                  value:
                    error: "E-mail inválido"
  /users/{user_id}:
    get:
      tags: [Users]
      summary: Detalhes de um utilizador
      description: Requer autenticação.
      parameters:
        - in: path
          name: user_id
          required: true
          description: ID do utilizador a consultar
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Detalhes do utilizador
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                erro:
                  value:
                    error: "Usuário não encontrado"
    put:
      tags: [Users]
      summary: Atualiza utilizador
      description: Requer autenticação. Só o próprio ou admin pode atualizar.
      parameters:
        - in: path
          name: user_id
          required: true
          description: ID do utilizador a atualizar
          schema:
            type: integer
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
            example:
              username: "novo_nome"
              email: "novo@email.com"
              role: "user"
      responses:
        '200':
          description: Utilizador atualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                erro:
                  value:
                    error: "Usuário não encontrado"
    delete:
      tags: [Users]
      summary: Apaga utilizador (apenas admin)
      description: Apenas admins autenticados podem apagar utilizadores.
      parameters:
        - in: path
          name: user_id
          required: true
          description: ID do utilizador a apagar
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Utilizador apagado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Usuário deletado"
        '403':
          description: Permissão negada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                erro:
                  value:
                    error: "Acesso restrito a administradores"
        '404':
          description: Não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                erro:
                  value:
                    error: "Usuário não encontrado"
  /me:
    get:
      tags: [Auth]
      summary: Retorna dados do utilizador autenticado
      description: Requer autenticação via JWT.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dados do utilizador autenticado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Não autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                erro:
                  value:
                    error: "Token inválido ou ausente"
  /venues:
    get:
      tags: [Venues]
      summary: Lista venues
      description: Lista todos os venues (locais) disponíveis.
      responses:
        '200':
          description: Lista de venues
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Venue'
    post:
      tags: [Venues]
      summary: Cria novo venue
      description: Requer autenticação via JWT.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VenueCreate'
            example:
              name: "Auditório Central"
              address: "Rua Exemplo, 123"
      responses:
        '201':
          description: Venue criado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
        '400':
          description: Erro de validação
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                erro:
                  value:
                    error: "Nome e endereço são obrigatórios"
  /venues/{venue_id}:
    get:
      tags: [Venues]
      summary: Detalhes de um venue
      parameters:
        - in: path
          name: venue_id
          required: true
          description: ID do venue
          schema:
            type: integer
      responses:
        '200':
          description: Detalhes do venue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
        '404':
          description: Não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                erro:
                  value:
                    error: "Venue não encontrado"
    put:
      tags: [Venues]
      summary: Atualiza venue
      description: Requer autenticação via JWT.
      parameters:
        - in: path
          name: venue_id
          required: true
          description: ID do venue
          schema:
            type: integer
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VenueCreate'
            example:
              name: "Novo Auditório"
              address: "Rua Nova, 456"
      responses:
        '200':
          description: Venue atualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
        '404':
          description: Não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                erro:
                  value:
                    error: "Venue não encontrado"
    delete:
      tags: [Venues]
      summary: Apaga venue
      description: Requer autenticação via JWT.
      parameters:
        - in: path
          name: venue_id
          required: true
          description: ID do venue
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Venue apagado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Venue deletado"
        '404':
          description: Não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                erro:
                  value:
                    error: "Venue não encontrado"
  /events:
    get:
      tags: [Events]
      summary: Lista eventos (com filtros)
      description: Lista eventos com filtros opcionais por nome, data e venue.
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Filtra por nome do evento
        - in: query
          name: date
          schema:
            type: string
            format: date
          description: Filtra por data (YYYY-MM-DD)
        - in: query
          name: venue_id
          schema:
            type: integer
          description: Filtra por ID do venue
      responses:
        '200':
          description: Lista de eventos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
    post:
      tags: [Events]
      summary: Cria novo evento
      description: Requer autenticação via JWT.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreate'
            example:
              name: "Show da Banda"
              date: "2025-08-20"
              venue_id: 1
      responses:
        '201':
          description: Evento criado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Erro de validação
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                erro:
                  value:
                    error: "Nome, data e venue_id são obrigatórios"
  /events/{event_id}:
    get:
      tags: [Events]
      summary: Detalhes de um evento
      parameters:
        - in: path
          name: event_id
          required: true
          description: ID do evento
          schema:
            type: integer
      responses:
        '200':
          description: Detalhes do evento
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                erro:
                  value:
                    error: "Evento não encontrado"
    put:
      tags: [Events]
      summary: Atualiza evento
      description: Requer autenticação via JWT.
      parameters:
        - in: path
          name: event_id
          required: true
          description: ID do evento
          schema:
            type: integer
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreate'
            example:
              name: "Novo Evento"
              date: "2025-09-01"
              venue_id: 2
      responses:
        '200':
          description: Evento atualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                erro:
                  value:
                    error: "Evento não encontrado"
    delete:
      tags: [Events]
      summary: Apaga evento
      description: Requer autenticação via JWT.
      parameters:
        - in: path
          name: event_id
          required: true
          description: ID do evento
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Evento apagado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Evento deletado"
        '404':
          description: Não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                erro:
                  value:
                    error: "Evento não encontrado"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Mensagem de erro detalhada
          example: "Recurso não encontrado"
    User:
      type: object
      description: Utilizador da plataforma
      properties:
        id:
          type: integer
          description: ID do utilizador
          example: 1
        username:
          type: string
          description: Nome de utilizador
          example: "jose"
        email:
          type: string
          description: E-mail do utilizador
          example: "jose@exemplo.com"
        role:
          type: string
          description: Role do utilizador (user/admin)
          example: "user"
    UserCreate:
      type: object
      required: [username, email, password]
      description: Dados para criar utilizador
      properties:
        username:
          type: string
          example: "jose"
        email:
          type: string
          example: "jose@exemplo.com"
        password:
          type: string
          example: "SenhaSegura123"
        role:
          type: string
          example: "user"
    UserUpdate:
      type: object
      description: Dados para atualizar utilizador
      properties:
        username:
          type: string
          example: "novo_nome"
        email:
          type: string
          example: "novo@email.com"
        role:
          type: string
          example: "user"
    Venue:
      type: object
      description: Local/Venue de evento
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Auditório Central"
        address:
          type: string
          example: "Rua Exemplo, 123"
    VenueCreate:
      type: object
      required: [name, address]
      description: Dados para criar um venue
      properties:
        name:
          type: string
          example: "Auditório Central"
        address:
          type: string
          example: "Rua Exemplo, 123"
    Event:
      type: object
      description: Evento registado na plataforma
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Show da Banda"
        date:
          type: string
          format: date
          example: "2025-08-20"
        venue_id:
          type: integer
          example: 1
    EventCreate:
      type: object
      required: [name, date, venue_id]
      description: Dados para criar um evento
      properties:
        name:
          type: string
          example: "Show da Banda"
        date:
          type: string
          format: date
          example: "2025-08-20"
        venue_id:
          type: integer
          example: 1